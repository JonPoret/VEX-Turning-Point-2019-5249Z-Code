/*
 *Driver Control
 *@author Karthik Selvaraj
 *November 6, 2018
 *Changes-
 * >This is the first draft
*/

#include "robot-config.h"    
    
int countLift = 0;
void liftConstant(){
    countLift++;
    if(countLift % 2 != 0){
        LeftLift.spin(vex::directionType::rev,100,vex::velocityUnits::rpm);
        RightLift.spin(vex::directionType::rev,100,vex::velocityUnits::rpm);
    }
    else{
        LeftLift.stop(vex::brakeType::brake);
        RightLift.stop(vex::brakeType::brake);
    }
}

void tallPole(){
    //PIDLift(0.0);
}

void shortPole(){
    //PIDLift(0.0);
}

void informationMotor1(){
    char str[5];
    SecondUser.Screen.print("Motor 1: ", str, "%lf", FlywheelTop.temperature(vex::percentUnits::pct), " & ", str, "%lf", FlywheelTop.efficiency(vex::percentUnits::pct));
    //return "Motor 1: " + (FlywheelTop.temperature(vex::percentUnits::pct)) + " & " + (FlywheelTop.efficiency(vex::percentUnits::pct));
}

void informationMotor2(){
    char str[5];
    SecondUser.Screen.print("Motor 2: ", str, "%lf", FlywheelBot.temperature(vex::percentUnits::pct), " & ", str, "%lf", FlywheelBot.efficiency(vex::percentUnits::pct));
    //return "Motor 2: " + (FlywheelBot.temperature(vex::percentUnits::pct)) + " & " + (FlywheelBot.efficiency(vex::percentUnits::pct));
}

int main() {
    MainUser.ButtonY.pressed(liftConstant); 
    MainUser.ButtonUp.pressed(tallPole); //these use the PID code in order to lift the lift to the desired height for either the tall pole or short pole
    MainUser.ButtonUp.pressed(shortPole);
    while(true){
        SecondUser.Screen.clearScreen();
        
        //Chassis Control
        int leftSpeedMainUser = int(MainUser.Axis3.position(vex::percentUnits::pct)) + ((MainUser.Axis1.position(vex::percentUnits::pct)) + (MainUser.Axis2.position(vex::percentUnits::pct)));
        int rightSpeedMainUser = int(MainUser.Axis3.position(vex::percentUnits::pct)) - ((MainUser.Axis1.position(vex::percentUnits::pct)) + (MainUser.Axis2.position(vex::percentUnits::pct)));
        
        int leftSpeedSecondUser = int(SecondUser.Axis3.position(vex::percentUnits::pct)) + ((SecondUser.Axis1.position(vex::percentUnits::pct)) + (SecondUser.Axis2.position(vex::percentUnits::pct)));
        int rightSpeedSecondUser = int(SecondUser.Axis3.position(vex::percentUnits::pct)) - ((SecondUser.Axis1.position(vex::percentUnits::pct)) + (SecondUser.Axis2.position(vex::percentUnits::pct)));
        
        if(leftSpeedSecondUser > 30 or leftSpeedSecondUser < -30){
            LeftChassis.spin(vex::directionType::fwd,leftSpeedSecondUser,vex::velocityUnits::pct);
        }
        else if(leftSpeedMainUser > 10 or leftSpeedMainUser < -10){
            LeftChassis.spin(vex::directionType::fwd,leftSpeedMainUser,vex::velocityUnits::pct);
        }
        else{
            LeftChassis.spin(vex::directionType::fwd,0,vex::velocityUnits::pct);
        }
        
        if(rightSpeedSecondUser > 30 or rightSpeedSecondUser < -30){
            RightChassis.spin(vex::directionType::fwd,rightSpeedSecondUser,vex::velocityUnits::pct);
        }
        else if(rightSpeedMainUser > 10 or rightSpeedMainUser < -10){
            RightChassis.spin(vex::directionType::fwd,rightSpeedMainUser,vex::velocityUnits::pct);
        }
        else{
            RightChassis.spin(vex::directionType::fwd,0,vex::velocityUnits::pct);
        }
        
        
        
        //Lift Control
        if(MainUser.ButtonL1.pressing()){
            LeftLift.spin(vex::directionType::fwd,180,vex::velocityUnits::rpm);
            RightLift.spin(vex::directionType::fwd,180,vex::velocityUnits::rpm);
        }
        else if(MainUser.ButtonL2.pressing()){
            LeftLift.spin(vex::directionType::rev,140,vex::velocityUnits::rpm);
            RightLift.spin(vex::directionType::rev,140,vex::velocityUnits::rpm);
        }
        else{
            LeftLift.stop(vex::brakeType::hold);
            RightLift.stop(vex::brakeType::hold);
        }
        
        
        
        //Conveyor Belt Control
        if(SecondUser.ButtonL1.pressing()){
            ConveyorBelt.spin(vex::directionType::fwd,200,vex::velocityUnits::rpm); //this spins the conveyor belt that is used to bring balls to our flywheel to shoot at  the flags
        }
        else if(SecondUser.ButtonL2.pressing()){
            ConveyorBelt.spin(vex::directionType::rev,200,vex::velocityUnits::rpm); //this spins the conveyor belt backwards in case that a ball gets stuck inside of the bot
        }
        else{
            ConveyorBelt.stop(vex::brakeType::hold);
        } 
        
        
        
        //Main User Claw Control 
        if(MainUser.ButtonR1.pressing()){
            Claw.spin(vex::directionType::fwd,140,vex::velocityUnits::rpm); //this rotates the claw clockwise
        }
        else if(MainUser.ButtonR2.pressing()){
            Claw.spin(vex::directionType::rev,140,vex::velocityUnits::rpm); //this rotates the claw counter clockwise
        }
        else{
            Claw.stop(vex::brakeType::hold);
        }
        
        
        
        //Second User Claw Control
        if(SecondUser.ButtonR2.pressing()){
            Claw.spin(vex::directionType::fwd,140,vex::velocityUnits::rpm); //this allows the second user to control the claw
        }
        else{
            Claw.stop(vex::brakeType::hold);
        }
        
        
        
        //FLYWHEEL TESTER
        if(SecondUser.ButtonR1.pressing()){ //the flywheel spins only when the right bumper button is pressed to prevent the motor from burning out
            FlywheelTop.spin(vex::directionType::fwd,100, vex::velocityUnits::pct);
            FlywheelBot.spin(vex::directionType::fwd,100, vex::velocityUnits::pct);
        }
        else{
            FlywheelBot.stop(vex::brakeType::coast);
            FlywheelTop.stop(vex::brakeType::coast);
        }
        
        informationMotor1();
        SecondUser.Screen.newLine();
        informationMotor2();
        vex::task::sleep(500);
    }
}
